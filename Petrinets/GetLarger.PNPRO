<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- This project file has been saved by the New GreatSPN Editor, v.100 --><project name="get larger" version="121">
  <gspn name="PT" show-color-cmd="false" show-fluid-cmd="false" show-timed-cmd="false" view-rates="false">
    <nodes>
      <place marking="8" name="P0" x="6.0" y="4.0"/>
      <place marking="3" name="P1" x="6.0" y="10.0"/>
      <place name="P2" x="16.0" y="7.0"/>
      <transition name="T0" nservers-x="0.5" type="EXP" x="11.55" y="7.0"/>
      <transition name="T1" nservers-x="0.5" type="EXP" x="11.55" y="12.0"/>
      <transition name="T2" nservers-x="0.5" type="EXP" x="11.55" y="2.0"/>
    </nodes>
    <edges>
      <arc head="T0" kind="INPUT" tail="P0"/>
      <arc head="T0" kind="INPUT" tail="P1"/>
      <arc head="P2" kind="OUTPUT" tail="T0"/>
      <arc head="T1" kind="INHIBITOR" tail="P0"/>
      <arc head="T2" kind="INHIBITOR" tail="P1"/>
      <arc head="T2" kind="INPUT" tail="P0"/>
      <arc head="T1" kind="INPUT" tail="P1"/>
      <arc head="P2" kind="OUTPUT" tail="T2"/>
      <arc head="P2" kind="OUTPUT" tail="T1"/>
    </edges>
  </gspn>
  <dta name="DTA">
    <nodes>
      <clock name="x" x="2.0" y="2.0"/>
    </nodes>
    <edges/>
  </dta>
  <measures gspn-name="PT" name="Measures" simplified-UI="false">
    <assignments/>
    <greatspn/>
    <formulas>
      <formula comment="Basic statistics of the toolchain execution." language="STAT"/>
    </formulas>
  </measures>
  <measures gspn-name="PT" log-uuid="95e714f0-38ab-4886-ab20-a2a70655d509" name="CTL model checking of PT" rapid-type="CTL_MODEL_CHECKING" simplified-UI="true">
    <assignments/>
    <rgmedd2 counter-examples="true"/>
    <formulas>
      <formula language="STAT"/>
      <formula comment="CTL formula" expr="AF(AG(#P2 == 8))" language="CTL">
        <result-table>
          <mc-result name="MEASURE0" value="true">
            <bindings/>
          </mc-result>
        </result-table>
      </formula>
    </formulas>
  </measures>
  <resource-list>
    <document-log uuid="95e714f0-38ab-4886-ab20-a2a70655d509"></document-log>
  </resource-list>
</project>
